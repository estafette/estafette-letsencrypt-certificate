apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    team: ${TEAM_NAME}
---
apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-account
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    team: ${TEAM_NAME}
type: Opaque
data:
  account.json: ${ACCOUNT_JSON}
  account.key: ${ACCOUNT_KEY}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: ${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    team: ${TEAM_NAME}
spec:
  replicas: 1
  strategy:
    type: Recreate
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        team: ${TEAM_NAME}
        version: ${VERSION}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9101"
    spec:
      serviceAccount: ${APP_NAME}
      containers:
      - name: ${APP_NAME}
        image: estafette/estafette-letsencrypt-certificate:${GO_PIPELINE_LABEL}
        imagePullPolicy: Always
        env:
        - name: "CF_API_EMAIL"
          value: "${CF_API_EMAIL}"
        - name: "CF_API_KEY"
          value: "${CF_API_KEY}"
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9101
          initialDelaySeconds: 30
          timeoutSeconds: 1
        volumeMounts:
        - name: letsencrypt-account
          mountPath: /account
      volumes:
      - name: letsencrypt-account
        secret:
          secretName: ${APP_NAME}-account